name: Update Package Version on PR Sync

on:
  pull_request:
    branches:
      - dev
    # types:
    #   - synchronize

jobs:
  update-version:
    runs-on: ubuntu-latest
    permissions:
      contents: write # Grant write access to the repository contents
      pull-requests: write # Grant write access to pull requests

    steps:
      # Step 1: Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          ref: dev # Ensure the `dev` branch is checked out

      # Step 2: Update package.json version based on branch name
      - name: Update package.json version
        id: update_version # Add an ID to reference this step's outputs
        run: |
          # Extract the branch name
          BRANCH_NAME="${{ github.head_ref }}"
          echo "Branch name: $BRANCH_NAME"

          # Read the current version from package.json
          CURRENT_VERSION=$(jq -r ".version" package.json)
          echo "Current version: $CURRENT_VERSION"

          # Split the version into major, minor, and patch
          IFS='.' read -r MAJOR MINOR PATCH <<< "$CURRENT_VERSION"

          # Determine the type of branch and update the version
          if [[ "$BRANCH_NAME" == *"major"* ]]; then
            MINOR=$((MINOR + 1)) # Increment the minor version for major branches
            PATCH=0 # Reset patch to 0
          elif [[ "$BRANCH_NAME" == *"minor"* ]]; then
            PATCH=$((PATCH + 1)) # Increment the patch version for minor branches
          fi

          # Construct the new version
          NEW_VERSION="$MAJOR.$MINOR.$PATCH"
          echo "New version: $NEW_VERSION"

          # Update the version in package.json
          jq ".version = \"$NEW_VERSION\"" package.json > temp.json && mv temp.json package.json

          # Output the new version for use in later steps
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV

      # Step 3: Commit and push the changes
      - name: Commit and push changes
        env:
          PAT: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git checkout dev # Ensure we are on the `dev` branch
          git add package.json
          git commit -m "Update version to $NEW_VERSION based on branch name: ${{ github.head_ref }}"
          git push https://x-access-token:${PAT}@github.com/${{ github.repository }} HEAD:dev

      # Step 4: Add labels to the pull request
      - name: Add labels to the pull request
        uses: actions/github-script@v6
        with:
          script: |
            const branchName = context.payload.pull_request.head.ref;
            const newVersion = process.env.NEW_VERSION;
            const labels = [];

            // Determine labels based on branch name
            if (branchName.includes("major")) {
              labels.push(`major-${newVersion}`);
            } else if (branchName.includes("minor")) {
              labels.push(`minor-${newVersion}`);
            } else {
              labels.push(`other-${newVersion}`);
            }

            // Add labels to the pull request
            await github.rest.issues.addLabels({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.pull_request.number,
              labels: labels,
            });
