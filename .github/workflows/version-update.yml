name: Update Package Version on PR Sync

on:
  pull_request:
    branches:
      - dev
    # types:
    #   - synchronize

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # GitHub token for authentication
  GITHUB_EVENT_PATH: ${{ github.event_path }} # Path to the event payload file

jobs:
  update-version:
    runs-on: ubuntu-latest
    permissions:
      contents: write # Grant write access to the repository contents
      pull-requests: write # Grant write access to pull requests

    steps:
      # Step 1: Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          ref: dev # Ensure the `dev` branch is checked out

      # Step 2: Update version based on branch name
      - name: Update version
        run: |
          # Extract the branch name
          BRANCH_NAME="${{ github.head_ref }}"
          echo "Branch name: $BRANCH_NAME"

          # Default version if no previous label is found
          DEFAULT_VERSION="0.1.0"

          # Fetch the PR number
          PR_NUMBER=$(jq -r ".pull_request.number" "$GITHUB_EVENT_PATH")
          echo "Pull Request Number: $PR_NUMBER"

          # Fetch the labels of the PR
          LABELS=$(gh pr view "$PR_NUMBER" --json labels --jq '.labels[].name')
          echo "Labels: $LABELS"

          # Extract the version label if it exists
          PREVIOUS_VERSION=$(echo "$LABELS" | grep -E '^[0-9]+\.[0-9]+\.[0-9]+$' || echo "$DEFAULT_VERSION")
          echo "Previous version: $PREVIOUS_VERSION"

          # Split the version into major, minor, and patch
          IFS='.' read -r MAJOR MINOR PATCH <<< "$PREVIOUS_VERSION"

          # Determine the type of branch and update the version
          if [[ "$BRANCH_NAME" == *"major"* ]]; then
            MINOR=$((MINOR + 1)) # Increment the minor version for major branches
            PATCH=0 # Reset patch to 0
          elif [[ "$BRANCH_NAME" == *"minor"* ]]; then
            PATCH=$((PATCH + 1)) # Increment the patch version for minor branches
          fi

          # Construct the new version
          NEW_VERSION="$MAJOR.$MINOR.$PATCH"
          echo "New version: $NEW_VERSION"

      # Step 3: Create or update the version label
      - name: Create Label if it Doesnt Exist
        run: |
          label_exists=$(gh label list --repo ${{ github.repository }} | grep -qw "${{ env.NEW_VERSION }}" || echo "not_found")
          if [[ "$label_exists" == "not_found" ]]; then
            echo "Label does not exist. Creating label: ${{ env.NEW_VERSION }}"
            gh label create "${{ env.NEW_VERSION }}" --description "Automatically generated label" --force
          else
            echo "Label already exists: ${{ env.NEW_VERSION }}"
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Step 4: Add the new version label to the PR
      - name: Set New Label
        uses: actions-ecosystem/action-add-labels@v1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          labels: ${{ env.NEW_VERSION }}
