name: Update Package Version on PR Sync

on:
  pull_request:
    branches:
      - dev
    types:
      - synchronize
      - opened

env:
  DEFAULT_VERSION: "r_1_0_0_v_0_0_0"
  FINAL_VERSION: "r_2_0_0_v_0_0_0"
  VERSION_PATTERN: 'r_\d+_\d+_\d+_v_\d+_\d+_\d+'

jobs:
  update-version:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Install jq
        run: sudo apt-get install -y jq

      - name: Fetch and Parse Previous Version Labels
        id: versioning
        run: |
          BRANCH_NAME="${{ github.head_ref }}"
          echo "Branch name: $BRANCH_NAME"

          # Fetch all labels from all PRs and extract version-like labels
          all_labels=$(gh pr list --state all --json labels --jq '.[].labels[].name' | grep -E '${{ env.VERSION_PATTERN }}' || true)

          if [[ -n "$all_labels" ]]; then
            echo "$all_labels" | sort -V | tee sorted_labels.txt
            LATEST_VERSION=$(tail -n 1 sorted_labels.txt)
          else
            echo "No matching version labels found. Using default."
            LATEST_VERSION="${{ env.DEFAULT_VERSION }}"
          fi

          echo "Latest version: $LATEST_VERSION"

          # Parse version components
          r_number=$(echo "$LATEST_VERSION" | cut -d '_' -f2)
          middle_number=$(echo "$LATEST_VERSION" | cut -d '_' -f3)
          last_number=$(echo "$LATEST_VERSION" | cut -d '_' -f4)
          v_first_number=$(echo "$LATEST_VERSION" | cut -d '_' -f6)
          v_middle_number=$(echo "$LATEST_VERSION" | cut -d '_' -f7)
          v_last_number=$(echo "$LATEST_VERSION" | cut -d '_' -f8)

          branch_name_lower=$(echo "$BRANCH_NAME" | tr '[:upper:]' '[:lower:]')

          if [[ "$branch_name_lower" == *feature* ]]; then
            v_middle_number=$((10#${v_middle_number} + 1))
          elif [[ "$branch_name_lower" == *bug* ]]; then
            v_last_number=$((10#${v_last_number} + 1))
          elif [[ "$branch_name_lower" == *release* ]]; then
            v_first_number=$((10#${v_first_number} + 1))
            v_middle_number=0
            v_last_number=0
          elif [[ "$branch_name_lower" == *final* ]]; then
            NEW_VERSION="${{ env.FINAL_VERSION }}"
            echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV
            exit 0
          fi

          # Construct new version
          NEW_VERSION="r_${r_number}_${middle_number}_${last_number}_v_${v_first_number}_${v_middle_number}_${v_last_number}"
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV

        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create Label if it Doesn't Exist
        run: |
          label_exists=$(gh label list --repo ${{ github.repository }} | grep -qw "${{ env.NEW_VERSION }}" || echo "not_found")
          if [[ "$label_exists" == "not_found" ]]; then
            echo "Creating label: ${{ env.NEW_VERSION }}"
            gh label create "${{ env.NEW_VERSION }}" --description "Auto-generated version label" --force
          else
            echo "Label already exists: ${{ env.NEW_VERSION }}"
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Add Label to PR
        uses: actions-ecosystem/action-add-labels@v1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          labels: ${{ env.NEW_VERSION }}
